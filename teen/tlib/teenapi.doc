TEEN v0.38 API                                                      2001/ 4/24
------------------------------------------------------------------------------
【はじめに】

    このドキュメントは TEEN の API の仕様を解説したものです。
    API で提供する機能は以下のグループに分類されます。

	［0.一般］
	［1.接続］
	［3.RESOLVER］
	［4.TCP］
	［9.インジケータ］
	［2.IPアドレス］
	［5.UDP］
	［6.IP/ICMP］

    この順番で各機能を解説します。

    なお、このドキュメントは製作途上であり、［2.IPアドレス］、［5.UDP］、
  ［6.IP/ICMP］は異なるフォーマットで記述してありますがあらかじめご了承下さ
  い。


【共通事項】

［割り込み番号］

  　TEEN の機能は ソフトウェア割り込みによって呼び出しますが、その割り込み
  番号は TEEN の常駐時に決定されます。TEEN API を利用するソフトウェアは最初
  に TEEN API の割り込み番号を取得する必要があります。

    TEEN API の割り込み番号が n のとき、n 番の割り込みベクタを seg:ofs とす
  ると、アドレス seg:ofs-9 を先頭に 9 バイトの識別文字列が格納されています。
  この文字列を探すことにより TEEN API の割り込み番号を取得できます。

    識別文字列
      "%TEENAPI",0
      (25h,54h,45h,45h,4Eh,41h,50h,49h,00h)


［呼び出し時の条件］

  ・多くのファンクションは、再入できません。再入した場合、エラーコード 02h を
    返します。
  ・一部のファンクションは、割り込み禁止状態で呼び出すことができません。「割
    り込み禁止状態」には、CPU の割り込み許可フラグが OFF になっている場合の
    他に、ハードウェア割り込みによって呼び出されたルーチンが割込みコントロー
    ラに「割り込み終了」を通知していない場合も含みます。
  ・一部のファンクションは、ハードウェア割り込みルーチンから呼び出すことがで
    きません。


［レジスタの保存］

  ・出力用レジスタ以外のレジスタの値は保存されます。
  ・CPU の割り込み許可フラグを OFF (CLI)の状態でファンクションを呼び出しても、
    ファンクションの実行中に割り込み許可フラグが ON (STI) の状態になることが
    あります。


［エラーコード（共通）］

  00h (エラーなし)
  01h ファンクション番号が正しくない
  02h 他のファンクションの処理を実行中
  03h (予約)
  04h (予約)
  05h (予約)



【ファンクション】

［0.一般］

　０１Ｈ　：	バージョン取得

	入力	AH = 01h

	出力	AL = バージョン整数部
		AH = バージョン小数部

	バグ	他のファンクションの処理を実行中のときは、CF=1,AL=2を返す。


　０２Ｈ　：	機種・OS 種別取得			       (v0.31改)(v0.21)

	入力	AH = 02h

	出力	AL = 機種コード・サブコード
		     BIT3-0:機種コード		BIT7-4:サブコード
		     0     .. PC-88VA		1..VA1
		     				2..VA2/3
		     				3..VA1+91
		     1     .. PC-9801/9821	不定
		     4     .. FM-R              不定           (v0.31)
		     5     .. FM-TOWNS          不定           (v0.31)
		     8     .. IBM-PC            不定           (v0.31)
		     その他.. 予約		予約

		AH = OS コード
		     BIT7-3 : 不定
		     BIT2   : 1.MS-DOSファンクション互換 0.非互換
		     BIT1   : 1.MS-DOS                   0.非MS-DOS
		     BIT0   : 1.PC-Engine                0.非PC-Engine

	解説	機種と OS の種類を返す。
		OS コードとして、具体的には以下を返す。
                  BIT2-0(2進表記)
		  110. MS-DOS
		  001. PC-Engine
		  101. PC-Engine+MSE

		アプリケーションが MS-DOS 特有の（PC-Engine にはない）DOS ファ
		ンクション（INT 21h）を利用する場合は OS コードの BIT2 を検査
		することにより、MS-DOS のワークエリアを参照する場合は OS コ
		ードの BIT1 を検査することにより、誤動作を防ぐことができる。

	バグ	他のファンクションの処理を実行中のときは、CF=1,AL=2を返す。
		機種が PC-9801/9821 である場合は OS コードとして 6 を、
		PC-88VA である場合は OS コードとして 5 を、無条件に返す。



［1.接続］

　１１Ｈ　：	接続						(v0.22改)

	入力	AH = 11h
		AL = 0

	出力	CF = 0 : 正常終了
			AL = 0
		CF = 1 : エラー
			AL = エラーコード
			 2.他のファンクションの処理を実行中
			 6.ユーザーの指示による作業の中断
			 7.電話が切れた
			 8.AT コマンドエラー
			 9.相手が電話に出ない
			10.話し中
			11.ダイヤルトーンが検出できない
			12.ログイン名またはパスワードが不正
			13.タイムアウト
		        14.相手がPPP接続を切断				(v0.22)
			(15-31.予約)

	解説	PPP接続を行なう。接続の完了または失敗を待って戻る。
		接続に失敗した場合、ファンクション 12h を呼ぶ必要はない。
		ESCキーで処理を中断できる。
		ハードウェア割り込みルーチンからの呼び出し不可。


　１２Ｈ　：	切断						(v0.20改)

	入力	AH = 12h

	出力	CF = 0 : 正常終了
			AL = 0
		CF = 1 : エラー
			AL = エラーコード
			 2.他のファンクションの処理を実行中

	解説	PPP接続を切断する。切断の完了を待って戻る。
		ESCキーで処理を中断できる。
		ハードウェア割り込みルーチンからの呼び出し不可。


　１３Ｈ　：	接続開始（非同期）					(v0.22)

	入力	AH = 13h
		AL = 0

	出力	CF = 0 : 正常終了
		CF = 1 : エラー
			AL = エラーコード
			 2.他のファンクションの処理を実行中

	解説	PPP接続を開始する。接続の完了を待たずに戻る。
		このファンクションを呼び出したのち、ファンクション 15h で接
		続の完了・失敗を確認する。接続に失敗した場合でもファンクショ
		ン 14h を呼んで切断を指示する必要がある。


　１４Ｈ　：	切断開始（非同期）					(v0.22)

	入力	AH = 14h

	出力	CF = 0 : 正常終了
		CF = 1 : エラー
			AL = エラーコード
			     2.他のファンクションの処理を実行中

	解説	PPP接続の切断を開始する。切断の完了を待たずに戻る。


　１５Ｈ　：	接続状況取得						(v0.22)

	入力	AH = 15h

	出力	CF = 0 : 正常終了
			AL = 接続状態又は切断理由
			      0.接続完了
			      1.接続・切断作業中
			      2.ユーザーの指示による作業の中断
			      3.電話が切れた
			      4.AT コマンドエラー
			      5.相手が電話に出ない
			      6.話し中
			      7.ダイヤルトーンが検出できない
			      8.ログイン名またはパスワードが不正
			      9.タイムアウト
			     10.相手がPPP接続を切断
		CF = 1 : エラー
			AL = エラーコード
			      2.他のファンクションの処理を実行中

	解説	PPP接続の状況を返す。切断している場合は、切断の理由(AL>=2)を返す。


［3.RESOLVER］

　３０Ｈ　：	名前からのIPアドレス取得		       (v0.20改)(v0.10)

	入力	AH = 30h
		ES:DI = 名前文字列(ASCIZ)のアドレス

	出力	CF = 0 : 正常終了
			(AL.AH.DL.DH) = IP アドレス
		CF = 1 : エラー
			AL = エラーコード
			 2.他のファンクションの処理を実行中
			 6.ホストが見つからない
			 7.ハンドル又はメモリが不足
			 8.名前が不適当
			 9.ネームサーバからの返答がない(タイムアウト)
			AH = 不定
			DX = 不定

	解説	ホスト名文字列からその IP アドレスを取得する。
		文字列が IP アドレスそのものを表しているとき
		(ex."123.45.6.78")は、その IP アドレスを返す。
		指定したホストが見つからない、ホスト名が名前として不適当、タ
		イムアウト時間までに解が得られない場合は、CF=1 を返す。
		割り込み禁止状態での呼び出し不可。

	バグ	名前として"0.0.0.0"を与えると、CF=1 を返す。


［4.TCP］

　４０Ｈ　：	能動接続要求					(v0.20改)

	入力	AH = 40h
		ES:DI = TCPパラメータテーブルのアドレス

		TCPパラメータテーブル
			DD 受信バッファアドレス
			DW 0
			DW 受信バッファサイズ（バイト）
			DD 送信バッファアドレス
			DW 0
			DW 送信バッファサイズ（バイト）
			DD 状態遷移通知手続き(FAR PROC)アドレス
			DW ポート番号
			DW 接続先ポート番号
			DD 接続先ホスト名ASCIZ文字列のアドレス

	出力	CF = 0 : 正常終了
			AL = ハンドル
		CF = 1 : エラー
			AL = エラーコード
			      2=
			      7=ハンドル不足
			      8=送信バッファ/受信バッファが不適当
			      9=その接続は既に確立している
			     12=使用不可能なポート番号を指定した


	解説	接続先を指定して、接続の確立作業を開始する。接続の完了を待た
		ずに戻る。
		受信バッファ、送信バッファはそれぞれ、TCP が受信、送信に使う
		バッファである。これらのバッファが小さすぎると転送効率が落ち
		る。受信バッファは 512 バイト以上用意しなければならない。送
		信・受信バッファはファンクション 44h でハンドルを開放するま
		で維持されなければならない。
		ポート番号に 0 を指定すると、空いているポートを自動的に割り
		振る。
		接続先ホストは、ホスト名の名前(例:"host.domain.jp")または IP
		アドレスを表す文字列(例:"123.45.67.8") で指定する。文字列の
		最後には 0 を付加すること。
		状態遷移通知手続きは、TCP 接続の状態が変化したとき（接続完了、
		切断など）呼び出される。状態遷移通知手続きが不要な場合は 0 を
		指定する。

	バグ	状態遷移通知手続きの仕様は現在未公開。
		エラー8/9/12 を返すことはない。
		接続先ホストがホスト名で指定された場合、ネームサーバからの返
		答が得られるかタイムアウトするまで待つ。
		割り込み禁止状態での呼び出し不可。


　４１Ｈ　：	受動接続要求					(v0.20改)

	入力	AH = 41h
		DX = ポート番号
		ES:DI = 状態遷移通知手続き(FAR PROC)アドレス

	出力	CF = 0 : 正常終了
			AL = ハンドル
		CF = 1 : エラー
			AL = エラーコード
			      2=
			      7=ハンドル不足
			     12=使用不可能なポート番号を指定した

	解説	指定したポートで相手からの接続要求を待つ。相手からの接続要求
		を待たずに戻る。相手からの接続要求の有無はファンクション 47h 
		で調べることができる。
		ポート番号に 0 を指定すると、空いているポートを自動的に割り
		振る。
		状態遷移通知手続きは、TCP 接続の状態が変化したとき（接続完了、
		切断など）呼び出される。状態遷移通知手続きが不要な場合は 0 を
		指定する。

	バグ	状態遷移通知手続きの仕様は現在未公開。
		エラー12 を返すことはない。


　４２Ｈ　：	接続要求受理					(v0.20改)

	入力	AH = 42h
		AL = ハンドル
		ES:DI = TCPパラメータテーブルのアドレス

		TCPパラメータテーブル
			DD 受信バッファアドレス
			DW 0
			DW 受信バッファサイズ（バイト）
			DD 送信バッファアドレス
			DW 0
			DW 送信バッファサイズ（バイト）
			DD 状態遷移通知手続き(FAR PROC)アドレス

	出力	CF = 0 : 正常終了
			AL = ハンドル
		CF = 1 : エラー
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている
			      7=ハンドル不足
			      8=送信バッファ/受信バッファが不適当
			     11=接続要求はない

	解説	ファンクション 41h で相手からの接続要求を待っているポートに対
		し接続要求があった場合、このファンクションで接続を受理し、接続
		の確立作業を開始する。接続の完了を待たずに戻る。
		正常終了時は、新しいハンドルを返す。接続を要求した相手との接続
		はこのハンドルによって管理される。AL に指定したハンドル
		(ファンクション 41h で得たハンドル)で管理されるポートでは別の
		接続要求を待つ。
		状態遷移通知手続きは、TCP 接続の状態が変化したとき（接続完了、
		切断など）呼び出される。状態遷移通知手続きが不要な場合は 0 を
		指定する。

	バグ	状態遷移通知手続きの仕様は現在未公開。
		エラー8 を返すことはない。


　４３Ｈ　：	切断要求					(v0.20改)

	入力	AH = 43h
		AL = ハンドル

	出力	CF = 0 : 正常終了
			AL = 0
		CF = 1 : エラー
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている
			     10=既に切断要求を出している

	解説	切断を要求する。相手からの切断要求があるまで実際には切断しな
		いが、切断の完了を待たずに戻る。
 		この関数の呼び出し後は、ファンクション 45h でデータの送信を行
 		なうことができない。


　４４Ｈ　：	切断・ハンドル開放				(v0.20改)

	入力	AH = 44h
		AL = ハンドル

	出力	CF = 0 : 正常終了
			AL = 0
		CF = 1 : エラー
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている

	解説	ハンドルを開放する。接続が完全に切断されていない場合は、強制
		的に切断する。


　４５Ｈ　：	送信						(v0.20改)

	入力	AH = 45h
		AL = ハンドル
		ES:DI = 送信データアドレス
		CX = 送信バイト数
		DX = 0 (フラグ)

	出力	CF = 0 : 正常終了
			AX = 送信バッファにコピーできたバイト数
		CF = 1 : エラー
			AH = 不定
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている
			     10=切断要求を出した後であり送信できない
			     11=そのハンドルは受動接続用である

	解説	データを送信する。ただし、送信の完了を待たずに戻る。
		ファンクション 47h で得られる状態が 4/5/6 の場合のみ送信でき
		る。
		送信するデータは一旦 TCP 送信バッファ(ファンクション 40h/42h
		で指定したもの) にコピーされる。送信バッファの空きが少ないと
		きは AX に返す値は CX で指定した送信バイト数より小さくなる。


　４６Ｈ　：	受信						(v0.20改)

	入力	AH = 46h
		AL = ハンドル
		ES:DI = 受信データ格納場所のアドレス
		CX = 受信するバイト数

	出力	CF = 0 : 正常終了
			AX = 受信できたバイト数
		CF = 1 : エラー
			AH = 不定
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている
			     11=そのハンドルは受動接続用である

	解説	データを受信する。受信データがない場合は AX に 0 を返し、相手
		からの受信を待たずに戻る。
		ファンクション 47h で得られる状態が 1/2 の場合には受信できな
		い。


　４７Ｈ　：	接続状態取得				       (v0.20改)(v0.10)

	入力	AH = 47h
		AL = ハンドル

	出力	CF = 0 : 正常終了
			AL = 状態
			0.(予約)
			1.相手からの接続要求待ち
			2.接続受理待ち
			3.接続先IPアドレスを取得中
			4.接続処理中
			5.接続している
			6.相手からの切断要求があった:相手からの受信はもうない
			  (こちらは切断要求を出していない)
			7.こちらから切断要求を出した:こちらからの送信はもうない
			  (相手は切断要求を出していない)
			8.切断処理中(送受信はもうない)
			9.完全に切断した
		CF = 1 : エラー
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている

	解説	接続の状態を返す。

	バグ	CF=0,AL=3 を返すことはない。


　４８Ｈ　：	切断原因取得						(v0.20)

	入力	AH = 48h
		AL = ハンドル

	出力	CF = 0 : 正常終了
			AL = 切断原因
			0.まだ切断は開始されていない
			1.相手から切断が要求された
			2.こちらが切断を要求した
			3.接続が拒否された
			4.タイムアウト(相手の返答がない)
			5.接続先が見つからない
		CF = 1 : エラー
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている

	解説	接続が切断した原因を返す。

	バグ	CF=0,AL=4 を返すことはない。


　４９Ｈ　：	IPアドレス・ポート番号取得				(v0.23)

	入力	AH = 49h
		AL = ハンドル
		ES:DI = IPアドレス・ポート番号テーブル(12バイト)のアドレス
			(テーブルの中身は参照されない)

	出力	CF = 0 : 正常終了
			AL = 0
			IPアドレス・ポート番号テーブル

			<IPアドレス・ポート番号テーブル>
			DW こちらのポート番号
			DD こちらのIPアドレス
			DW 相手のポート番号
			DD 相手のIPアドレス

		CF = 1 : エラー
			AL = エラーコード
			      2=
			      6=ハンドルが間違っている

	解説	接続の両端のIPアドレスとポート番号をES:DIで指定されたIPアドレ
		ス・ポート番号テーブルに書き出す。
		ファンクション47h(接続状態取得)の返す値が1(相手からの接続要求
		待ち)の場合は、相手のポート番号・相手のIPアドレス・こちらのIP
		アドレスが未定義であり正しい値を返さない。また、ファンクショ
		ン47h(接続状態取得)の返す値が3(接続先IPアドレスを取得中)の場
		合は、相手のIPアドレス・こちらのIPアドレスが未定義であり正し
		い値を返さない。
		IPアドレス a.b.c.d は、メモリアドレスの小さいほうから a,b,c,d
		の順に格納される。


［9.インジケータ］

　９０Ｈ：	インジケータ表示制御					(v0.21)

	入力	AH = 90h
		AL = 0 : 表示禁止
		     1 : 表示許可

	出力	なし

	解説	テキスト画面ファンクションキー表示行に表示される TEEN の状態
		表示とファンクション 92h-94h による表示を制御する。
		常駐時の許可状態は定義ファイル [TSR]104 での指定に従う。

	バグ	他のファンクションの処理を実行中のときは、CF=1,AL=2を返す。


　９２Ｈ：	インジケータ文字表示					(v0.21)

	入力	AH = 92h
		DH = 桁位置
		DL = 表示する文字の ASCII コード

	出力	なし

	解説	テキスト画面ファンクションキー表示行の指定された桁位置に 
		ASCII 文字を表示する。

	バグ	他のファンクションの処理を実行中のときは、CF=1,AL=2を返す。


　９３Ｈ：	インジケータ整数表示					(v0.21)

	入力	AH = 93h
		DX = 表示する整数
		CH = 桁位置
		CL = 表示桁数

	出力	なし

	解説	テキスト画面ファンクションキー表示行の指定された桁位置に 
		DX で指定された非負整数を十進表記で指定された表示桁数で表示
		する。

	バグ	他のファンクションの処理を実行中のときは、CF=1,AL=2を返す。


　９４Ｈ：	インジケータ文字列表示					(v0.21)

	入力	AH = 94h
		ES:DI = 表示 ASCIZ 文字列のアドレス
		        (ただし、1バイトコードのみからなる文字列)
		CH = 桁位置

	出力	なし

	解説	テキスト画面ファンクションキー表示行の指定された桁位置に 
		ASCII 文字列を表示する。2バイトコード文字は表示できない。

	バグ	他のファンクションの処理を実行中のときは、CF=1,AL=2を返す。



============================================================================
■　ＩＰアドレス　■ (［2. IPアドレス］)
============================================================================

□ TEENで用いるIPアドレスの表現形式

    TEENで用いるIPアドレスの表現には以下の３通りがある。

    ・IPアドレス文字列
        IPアドレスをドット表記で表したASCIZ文字列。例: DB "192.168.1.2",0
    ・IPアドレス構造体
        18バイトのデータ。内部の構造は非公開。
    ・４バイトIPアドレス
        IPアドレスを DWORD で表したもの。IPアドレス a.b.c.d を次のように表す。
          MSB 31  24 23  16 15   8 7    0 LSB
              | d  | | c  | | b  | | a  |


    IPアドレス文字列は、TCP/UDPファンクションにおいて接続先・送信先を指定す
  るのに使う。IPアドレス構造体は、接続先・送信先の指定に使うほか、TCP/UDPファ
  ンクションがIPアドレスを返すときに用いられる。(TEEN v0.32 では TCPファンク
  ションでIPアドレス構造体を使うことはできない。)
    ４バイトIPアドレスは、TCP/UDPを使ったアプリケーションで必要な場合にのみ
  用いる。TCP/UDPファンクションでは４バイトIPアドレスを使わない。

    上記３通りのIPアドレスの表現を相互に変換するファンクションとして４つのファ
  ンクション inet_toipaddr,inet_tostr,inet_ipv4addrtoipaddr,inet_toipv4addr
  がある。

    IPアドレス文字列は終端の0を含めて最大で40バイトである(現時点で実際に使用
  しているのは最大16バイトであるが、将来の拡張で40バイトになる可能性がある)。
  従って、IPアドレス文字列を出力するファンクションを呼び出す時にはIPアドレス
  文字列の受け取り用に40バイト以上の領域を確保する必要がある。

□ ワイルドカードアドレス

    「どのIPアドレスでも良い」ことを表す特別なIPアドレスをワイルドカードアド
  レスと呼ぶ。「IPアドレスを指定しない」「IPアドレスが未定義である」ことを表
  すのにも使う。
    以下の値をワイルドカードアドレスとして使う。

    ・IPアドレス文字列
        DB "0.0.0.0",0
    ・IPアドレス構造体
        DX=0,SI=0 でファンクション inet_toipaddr (20h) を呼び出して得られる
      値
    ・４バイトIPアドレス
        0

    与えられたIPアドレスがワイルドカードアドレスかどうかを判定する
  inet_iswildcard が用意されている。

□ ファンクション解説

----------------------------------------------------------------------------
◇ 20h   inet_toipaddr        IPアドレス構造体への変換
----------------------------------------------------------------------------

【書式】
        入力    AH = 20h
                DX:SI = IPアドレス文字列/IPアドレス構造体のアドレス
                ES:DI = 変換後のIPアドレス構造体の格納アドレス
        出力    正常終了時
                        CF = 0
                        AL = 0
                異常終了時
                        CF = 1
                        AL = 不定

【解説】
                  IPアドレス文字列をIPアドレス構造体へ変換する。入力としてIP
                アドレス構造体を与えた場合は、そのままその値を返す。入力が
                IPアドレス文字列でもIPアドレス構造体でもない場合はエラーとな
                る。
                  DX=0 かつ SI=0 の場合、ワイルドカードIPアドレスを返す。

【対応版番号】
                v0.32


----------------------------------------------------------------------------
◇ 21h   inet_tostr           IPアドレス文字列への変換
----------------------------------------------------------------------------

【書式】
        入力    AH = 21h
                DX:SI = IPアドレス文字列/IPアドレス構造体のアドレス
                ES:DI = 変換後のIPアドレス文字列の格納アドレス
        出力    正常終了時
                        CF = 0
                        AL = 0
                異常終了時
                        CF = 1
                        AL = 不定

【解説】
                  IPアドレス構造体をIPアドレス文字列に変換する。入力としてIP
                アドレス文字列を与えた場合、そこから不要な '0' を取り除いた
                文字列を返す("001.012.123.000" -> "1.12.123.0")。
                  入力が IPアドレス文字列でもIPアドレス構造体でもない場合は
                エラーとなる。

【対応版番号】
                v0.32


----------------------------------------------------------------------------
◇ 22h   inet_toipv4addr      ４バイトIPv4アドレスへの変換
----------------------------------------------------------------------------

【書式】
        入力    AH = 22h
                ES:DI = IPアドレス文字列/IPアドレス構造体のアドレス

        出力    正常終了時
                        CF = 0
                        (AL.AH.DL.DH) = ４バイトIPv4アドレス
                異常終了時
                        CF = 1
                        AX = 不定
                        DX = 不定

【解説】
                  IPアドレス構造体、IPアドレス文字列を４バイトIPv4アドレスに
                変換する。入力がIPアドレス構造体、IPアドレス文字列のいずれで
                もない場合はエラーとなる。
【対応版番号】
                v0.32

----------------------------------------------------------------------------
◇ 23h   inet_ipv4addrtoipaddr ４バイトIPv4アドレスからIPアドレス構造体へ変
換
----------------------------------------------------------------------------

【書式】
        入力    AH = 23h
                (BL.BH.DL.DH) = ４バイトIPv4アドレス
                ES:DI = IPアドレス構造体の格納アドレス

        出力    なし

【解説】
                  ４バイトIPv4アドレスをIPアドレス構造体へ変換する。

【対応版番号】
                v0.32


----------------------------------------------------------------------------
◇ 24h   inet_iswildcard      ワイルドカードIPアドレスの判定
----------------------------------------------------------------------------

【書式】
        入力    AH = 24h
                ES:DI = IPアドレス構造体/IPアドレス文字列のアドレス
        出力    AL = 判定
                        0     ワイルドカードでない
                        0以外 ワイルドカードである

【解説】
                  与えた IPアドレス構造体またはIPアドレス文字列がワイルドカ
                ードIPアドレスかどうかを返す。

【対応版番号】
                v0.32


============================================================================
■　ＵＤＰ　■ (［5. UDP］)
============================================================================

□ 一般的な呼び出し手順

    UDP ファンクションの一般的な呼び出し手順は以下の通り。

    ・udp_open でハンドルを取得
    ・udp_sendto で相手を指定して送信 / udp_recvfrom で受信
    ・udp_close でハンドルを解放

    UDPはコネクションなしの通信機能を提供するが、特定の相手との連続した通信
  を容易にするため、通信相手を指定して udp_open を呼び出せる。このような
  udp_open の呼び出しによって得たハンドルを「相手指定付きハンドル」と呼ぶこ
  とにする。相手指定付きハンドルを使った呼び出し手順は以下のようになる。

    ・udp_open で相手を指定してハンドルを取得
    ・udp_state が返すハンドルの状態が UDP_OPEN になるまで待つ
    ・udp_send で送信 / udp_recv で受信
    ・udp_close でハンドルを解放

    udp_send は udp_sendto と異なり送信先を指定する必要がない。udp_recvfrom
  は受信したデータの送信者のIPアドレスとポート番号も返すが、udp_recv はそれ
  らの情報を返さない。

    相手指定付きハンドルと区別するため、相手を指定せずに udp_open を呼び出し
  て得たハンドルを「相手指定なしハンドル」と呼ぶことにする。

□ 送信データの消失

    UDP は送信データが相手に到着することを保証しない。以下の場合は送信データ
  が TEEN 内部で失われることがある。

    ・送信データが大きすぎる場合 (1400バイト以下なら大丈夫なはず)。
    ・UDP以外のものも含め、送信できずにTEEN内部にたまっているデータが多い時。

□ ホスト記述子

    通信相手を指定するのに、以下の３つを使用できる。これらをまとめてホスト記
  述子と呼ぶ。

    ・ホスト名(文字列)
    ・IPアドレス文字列
    ・IPアドレス構造体


□ ファンクション解説

----------------------------------------------------------------------------
◇ 50h   udp_open             UDP ハンドルの取得
----------------------------------------------------------------------------

【書式】
        入力    AH = 50h
                AL = 0
                ES:DI = UDP パラメータテーブルのアドレス

                《UDP パラメータテーブル》
                        DD 受信バッファアドレス
                        DW 0
                        DW 受信バッファサイズ（バイト）
                        DD 0
                        DW 0
                        DW 0
                        DD 0
                        DW 自分のポート番号
                        DW 相手ポート番号
                        DD 相手ホスト記述子のアドレス
                        DW 0

        出力    正常終了時
                        CF = 0
                        AL = ハンドル
                異常終了時
                        CF = 1
                        AL = エラーコード
                              2 処理中(EUDP_BUSY)
                              7 ハンドル不足(EUDP_NORESOURCE)
                              8 パラメータが不適当(EUDP_RANGE)
                             12 使用不可能なポート番号(EUDP_BADPORT)

【解説】
                  UDP での送受信に必要なハンドルを取得する。ハンドルの取得に
                あたって、UDP 受信バッファ、自分のポート番号、相手のホスト、
                相手のポート番号を指定する。
                  UDP 受信バッファは、このハンドル宛てに届いた UDP パケット
                を一時的に格納するのに使用される。受信バッファに入り切らなかっ
                たパケットは捨てられる。UDP 受信バッファに指定したメモリ領域
                は、udp_close を呼び出すまで他の用途に使用してはならない。
                  自分のポート番号として UDP_PORTANY (0) を指定した場合、自
                動的にポートが割り当てられる。
                  相手ホスト記述子としてワイルドカードアドレスを指定するか、
                相手ホスト記述子のポインタ(アドレス)として NULL (0) を指定す
                るか、相手ポート番号として UDP_PORTANY (0) を指定した場合、
                返されるハンドルは相手指定なしハンドルとなる。
                  UDP パラメータテーブルは udp_open 実行後は破棄して良い。

【エラーコード】
                EUDP_BADPORT    ポート番号で指定したポートが使用中

                EUDP_RANGE      UDPパラメータテーブル内で指定した値が正しい
                範囲にない。0を与えるべきパラメータに0を与えていない。

                EUDP_NORESOURCE ハンドル不足

【対応版番号】
                v0.30
                IPアドレス構造体,相手指定なしハンドは v0.32 でサポート

----------------------------------------------------------------------------
◇ 51h   udp_close            UDP ハンドルの開放
----------------------------------------------------------------------------

【書式】
        入力    AH = 51h
                AL = ハンドル

        出力    正常終了時
                        CF = 0
                        AL = 0
                異常終了時
                        CF = 1
                        AL = エラーコード
                              2 処理中 (EUDP_BUSY)
                              6 ハンドルが間違っている (EUDP_BADHANDLE)

【解説】
                  udp_open で取得したハンドルを開放する。

【対応版番号】
                v0.30

----------------------------------------------------------------------------
◇ 52h   udp_state            状態取得
----------------------------------------------------------------------------

【書式】
        入力    AH = 52h
                AL = ハンドル

        出力    正常終了時
                        CF = 0
                        AL = 状態
                              1  IP アドレス検索中につき送受信不可 (UDP_SEARCH)
                              2  送受信可能 (UDP_OPEN)
                              3  相手ホストがみつからず送受信不可 (UDP_CLOSED)
                異常終了時
                        CF = 1
                        AL = エラーコード
                              2  処理中 (EUDP_BUSY)
                              6  ハンドルが間違っている (EUDP_BADHANDLE)

【解説】
                  現在のハンドルの状態を返す。相手指定なしハンドルでは常に
                UDP_OPEN を返す。

【対応版番号】
                v0.30


----------------------------------------------------------------------------
◇ 54h   udp_send             送信
----------------------------------------------------------------------------

【書式】
        入力    AH = 54h
                AL = ハンドル
                ES:DI = 送信データのアドレス
                CX = 送信データのバイト数

        出力    正常終了時
                        CF = 0 
                        AX = 送信したバイト数
                異常終了時
                        CF = 1
                        AH = 不定
                        AL = エラーコード
                              2 処理中 (EUDP_BUSY)
                              6 ハンドルが間違っている (EUDP_BADHANDLE)
                             11 送信できる状態にない (EUDP_BADSTATE)
                             13 相手が指定されていない (EUDP_NOPEER)
                             16 データが長すぎて送れない (EUDP_DATASIZE)

【解説】
                  データを相手に送信する。一度に送信できるデータのサイズ(UDP
                パケットのサイズ)には上限があり、それを越えた場合はエラーを
                返す。
                  相手指定なしハンドルでは使用できない。

【エラーコード】
                EUDP_BUSY       処理中

                EUDP_BADHANDLE  ハンドルが間違っている

                EUDP_BADSTATE   送信できる状態にない。udp_open で相手ホスト
                記述子としてホスト名を使用し、その IP アドレスがまだ得られて
                いない。

                EUDP_NOPEER     相手が指定されていない。udp_open で相手ホス
                トを指定しなかった。

                EUDP_DATASIZE   データが長すぎて送れない

【バグ】
                  エラーコード EUDP_DATASIZE (16) を返さない。送信データが大
                きすぎる場合は単に捨てられる。

【対応版番号】
                v0.30


----------------------------------------------------------------------------
◇ 55h   udp_recv             受信
----------------------------------------------------------------------------

【書式】
        入力    AH = 55h
                AL = ハンドル
                ES:DI = 受信データ格納場所のアドレス
                CX = 受信データ格納場所のバイト数

        出力    正常終了時
                        CF = 0
                        AX = 受信したバイト数
                異常終了時
                        CF = 1
                        AH = 不定
                        AL = エラーコード
                              2  処理中 (EUDP_BUSY)
                              6  ハンドルが間違っている (EUDP_BADHANDLE)
                             14  受信データなし (EUDP_NODATA)
                             15  受信データが大きすぎる (EUDP_BUFOVER)

【解説】
                  受信データを１パケット分取り出し、受信データ格納場所へコピ
                ーする。そのパケットが受信データ格納場所より大きい場合、格納
                場所いっぱいまで受信データをコピーし、入り切らないデータは捨
                て、エラーコード EUDP_BUFOVER (15) を返す。
                  受信したパケットのサイズが 0 の場合は受信したバイト数とし
                て 0 を返す。
                  受信データがない場合はエラーコード EUDP_NODATA を返す。
                  相手指定付きハンドルでは、指定した相手(指定したホストの指
                定したアドレス)から送信されたデータのみを受信する。相手指定
                なしハンドルでは、udp_openで指定した「自分のポート」に送られ
                てくるデータ全てを受信する。

【対応版番号】
                v0.30


----------------------------------------------------------------------------
◇ 56h   udp_sendto           宛て先付き送信
----------------------------------------------------------------------------

【書式】
        入力    AH = 56h
                AL = ハンドル
                ES:DI = パラメータテーブルのアドレス

                《パラメータテーブル》
                        +00 buf      DD 送信データのアドレス
                        +04 len      DW 送信データのバイト数
                        +06 toport   DW 送信先ポート番号
                        +08 toaddr   DD 送信先IPアドレス文字列または
                                        IPアドレス構造体のアドレス

        出力    正常終了時
                        CF = 0 
                        AX = 送信したバイト数
                異常終了時
                        CF = 1
                        AH = 不定
                        AL = エラーコード
                              2 処理中 (EUDP_BUSY)
                              6 ハンドルが間違っている (EUDP_BADHANDLE)
                             11 送信先にホスト名を指定した (EUDP_BADSTATE)
                             16 データが長すぎて送れない (EUDP_DATASIZE)

【解説】
                  送信データを指定した送信先に送信する。送信先の指定方法とし
                て、IPアドレス文字列とIPアドレス構造体が使える。ホスト名文字
                列を使用した場合はエラーコード EUDP_BADSTATE を返す。
                  一度に送信できるデータのサイズ(UDP パケットのサイズ)には上
                限があり、それを越えた場合はエラーを返す。

【バグ】
                  エラーコード EUDP_DATASIZE (16) を返さない。送信データが大
                きすぎる場合は単に捨てられる。

【対応版番号】
                v0.32


----------------------------------------------------------------------------
◇ 57h   udp_recvfrom         送信者情報付き受信
----------------------------------------------------------------------------

【書式】
        入力    AH = 57h
                AL = ハンドル
                ES:DI = パラメータテーブルのアドレス

                《パラメータテーブル》
                        +00 buf      DD 受信データ格納領域のアドレス
                        +04 len      DW 受信データ格納領域のバイト数
                        +06 fromport DW 出力(送信者ポート番号)
                        +08 fromaddr DD 送信者IPアドレス構造体格納場所アドレス

        出力    正常終了時
                        CF = 0
                        AX = 受信したバイト数
                        fromport = 送信者ポート番号
                        fromaddr で指定した領域 = 送信者IPアドレス構造体
                異常終了時
                        CF = 1
                        AH = 不定
                        AL = エラーコード
                              2  処理中 (EUDP_BUSY)
                              6  ハンドルが間違っている (EUDP_BADHANDLE)
                             14  受信データなし (EUDP_NODATA)
                             15  受信データが大きすぎる (EUDP_BUFOVER)

【解説】
                  受信データを１パケット分取り出し、受信データ格納場所へコピ
                ーし、その送信者の IP アドレスとポート番号を返す。
                  パラメータテーブルの buf,len,fromaddr をセットしてからこの
                ファンクションを呼び出すと、送信者のポート番号がパラメータテ
                ーブルの fromport に格納され、送信者のIPアドレス構造体が
                fromaddr で指定したアドレスに格納される。
                  受信データが受信データ格納領域より大きい場合、格納場所いっ
                ぱいまで受信データをコピーし、入り切らないデータは捨て、エラ
                ーコード EUDP_BUFOVER (15) を返す。
                  受信したパケットのサイズが 0 の場合は受信したバイト数とし
                て 0 を返す。受信データがない場合はエラーコード EUDP_NODATA
                を返す。
                  相手指定付きハンドルでは、指定した相手(指定したホストの指
                定したアドレス)から送信されたデータのみを受信する。相手指定
                なしハンドルでは、udp_openで指定した「自分のポート」に送られ
                てくるデータ全てを受信する。

【対応版番号】
                v0.32


----------------------------------------------------------------------------
◇ 5Ah   udp_getmyaddr        自分のIPアドレス・ポート番号取得
----------------------------------------------------------------------------

【書式】
        入力    AH = 5Ah
                AL = ハンドル
                ES:DI = IPアドレス構造体格納場所アドレス

        出力    正常終了時
                        CF = 0
                        AX = ポート番号
                異常終了時
                        CF = 1
                        AH = 不定
                        AL = エラーコード
                              2  処理中 (EUDP_BUSY)
                              6  ハンドルが間違っている (EUDP_BADHANDLE)

【解説】
                  自分の IPアドレスとポート番号を返す。IPアドレスはIPアドレ
                ス構造体で返す。
                  相手指定なしハンドルでは、IPアドレスとして常にワイルドカー
                ドアドレスを返す。相手指定付きハンドルでは、udp_state の返す
                値が UDP_OPEN の時以外は IPアドレスとしてワイルドカードアド
                レスを返す。

【対応版番号】
                v0.32


----------------------------------------------------------------------------
◇ 5Bh   udp_getpeeraddr      相手のIPアドレス・ポート番号取得
----------------------------------------------------------------------------

【書式】
        入力    AH = 5Bh
                AL = ハンドル
                ES:DI = IPアドレス構造体格納場所アドレス

        出力    正常終了時
                        CF = 0
                        AX = ポート番号
                異常終了時
                        CF = 1
                        AH = 不定
                        AL = エラーコード
                              2  処理中 (EUDP_BUSY)
                              6  ハンドルが間違っている (EUDP_BADHANDLE)

【解説】
                  相手の IPアドレスとポート番号を返す。IPアドレスはIPアドレ
                ス構造体で返す。
                  相手指定なしハンドルでは、IP アドレスとしてワイルドカード
                アドレスを、ポート番号として UDP_PORTANY (0) を返す。相手指
                定付きハンドルでは、udp_state の返す値が UDP_OPEN の時のみ正
                しい値を返す。

【対応版番号】
                v0.32


============================================================================
■　ＩＰ／ＩＣＭＰ　■ (［6. IP/ICMP］)
============================================================================

□ ファンクション解説

----------------------------------------------------------------------------
◇ 60h   ip_getrtentry        ルーティングテーブルエントリ取得
----------------------------------------------------------------------------

【書式】
        入力    AH = 60h
                CH = n: エントリの番号(>=0)
                CL = bufsize: ルーティングテーブルエントリ格納場所のバイト数
                ES:DI = buf: ルーティングテーブルエントリ格納場所へのポインタ

                《ルーティングテーブルエントリ》
                +00 dest      DB 18 DUP (?) ;宛て先ホスト/ネットアドレス
                +12 destmask  DB ?          ;dest のネットマスクのビット数
                +13 gateway   DB 18 DUP (?) ;ゲートウェイのアドレス
                +25 flag      DW ?          ;フラグ
                        bit0 valid          ;このエントリは有効
                        bit1 gateway        ;indirectルート
                +27 interface DB ?          ;ネットワークインタフェース番号
                (上記相対アドレスは16進表記)

        出力    正常終了時
                        CF = 0
                        AL = 0
                        ES:DI で指定した領域 = ルーティングエントリ
                異常終了時
                        CF = 1
                        AL = 0FFh (n がエントリ番号の最大を越えている)

【解説】
                  ルーティングテーブル中の各エントリを返す。各エントリには 0
                から順に番号が付いている。n に取得するエントリの番号を指定す
                るが、これがエントリ数以上である場合は CF = 1 を返す。
                  通常、buf で指定する格納場所はルーティングエントリ(40バイ
                ト)と同じサイズだけ用意し、bufsize にそのバイト数を指定する。
                bufsize がルーティングエントリのサイズより小さい場合は、入り
                きらない部分は buf に格納されない。(bufsize の指定が必要なの
                は、将来のバージョンでルーティングエントリのサイズが増えた場
                合でも古いバージョン用のプログラムがそのまま動くようにするた
                め。)
                  以下、ルーティングエントリについて説明する。
                  dest は宛て先のホストまたはネットワークのアドレス(IPアドレ
                ス構造体)である。これがワイルドカードアドレス(0.0.0.0)である
                場合、そのエントリはデフォルトルートである。
                  destmask は dest に適用するネットマスクを、1のビット数で示
                したものである。デフォルトルートでは0、ホストルートでは32で
                あり、それ以外はネットワークルートである。
                  gateway はゲートウェイのアドレス(IPアドレス構造体)である。
                flag.gateway=1 の時のみ意味を持つ。
                  flag.valid が1ならそのエントリが有効であることを示す。
                  flag.gateway が1ならそのエントリがindirect(間接)ルートであ
                り、宛て先に到達するのにゲートウェイを利用することを示す。
                  interface は dest 宛のパケットを送信する際に使用するネット
                ワークインタフェースの番号である。この番号は現在はつねに0で
                ある(ネットワークインタフェースが1個しかないため)。

【対応版番号】
                v0.36


----------------------------------------------------------------------------
◇ 64h   icmp_send            ICMPメッセージ送信
----------------------------------------------------------------------------

【書式】

        入力    AH = 64h
                ES:DI = icmpprm: ICMPパラメータテーブルのアドレス

                《ICMPパラメータテーブル》
                +00 src     DD 0 ;常に 0 を指定
                +04 dest    DD ? ;メッセージ宛て先IPアドレス文字列または
                                 ;IPアドレス構造体のアドレス
                +08 ttl     DB ? ;TTL(Time To Live)
                +09 dmy     DB ? ;未使用
                +0A type    DB ? ;ICMPメッセージタイプ
                +0B code    DB ? ;ICMPメッセージコード
                +0C id      DW ? ;ICMPメッセージ識別番号
                +0E seq     DW ? ;ICMPメッセージシーケンス番号
                +10 buf     DD ? ;ICMPオプションデータのアドレス
                +14 len     DW ? ;ICMPオプションデータの長さ(バイト)
                (上記相対アドレスは16進表記)

        出力    正常終了時
                        CF = 0
                        AL = 0

                異常終了時
                        CF = 1
                        AL = 0以外(不定)

【解説】
                  ICMPメッセージを宛て先destに送信する。ICMPメッセージタイプ、
                コード、識別番号、シーケンス番号、オプションデータを指定する。
                IPパケットに設定するTTL(Time To Live)も指定する。
                  宛て先は、IPアドレス文字列またはIPアドレス構造体で指定し、
                destにはその(文字列または構造体の)アドレスを与える。ホスト名
                を指定するとエラーになる。
                  ttl には TTL を 1〜255 で指定する。
                  type および code にはそれぞれICMPメッセージタイプとコード
                を指定する。
                  id と seq にはそれぞれICMPメッセージの識別番号とシーケンス
                番号を指定する。id と seq の値は、ICMPメッセージの 4 バイト
                目(WORD)と 6バイト目(WORD)に書き込まれる。ICMPメッセージタイ
                プによっては識別番号とシーケンス番号が不要であるが、その場合
                は id,seq に0を指定することにより、4〜7バイト目に 0 が書き込
                まれる。
                  ICMPメッセージの8バイト目以降にデータを書き込む場合には、
                そのデータのアドレスをbufに、データの長さ(バイト)をlenに指定
                する。不要な場合はbuf,lenに0を指定する。
                  src および dmy には常に0を与える。

                  このファンクションはIPv6移行時の問題が考慮されていない。
                ping, traceroute等の特殊なアプリケーションをのぞき、一般アプ
                リケーションではなるべく使用しないで頂きたい。

【対応版番号】
                v0.37


----------------------------------------------------------------------------
◇ 65h   icmp_recv            ICMPメッセージ受信
----------------------------------------------------------------------------

【書式】

        入力    AH = 65h
                ES:DI = icmpprm: ICMPパラメータテーブルのアドレス

                《ICMPパラメータテーブル》
                +00 src     DD ? ;IPアドレス構造体のアドレス
                                 ;メッセージ送信元IPアドレス取得用
                +04 dest    DD ? ;IPアドレス構造体のアドレス
                                 ;メッセージ宛て先IPアドレス取得用
                +08 ttl     DB ? ;TTL(Time To Live) (出力)
                +09 dmy     DB ? ;未使用
                +0A type    DB ? ;ICMPメッセージタイプ (出力)
                +0B code    DB ? ;ICMPメッセージコード (出力)
                +0C id      DW ? ;ICMPメッセージ識別番号 (出力)
                +0E seq     DW ? ;ICMPメッセージシーケンス番号 (出力)
                +10 buf     DD ? ;ICMPオプションデータ格納場所のアドレス
                +14 len     DW ? ;上記格納場所の長さ(バイト) (入出力)
                (上記相対アドレスは16進表記)

        出力    正常終了時
                        CF = 0
                        AL = 0
                        ICMPパラメータテーブル
                                ttl  = 受信メッセージのTTL
                                type = 受信メッセージのタイプ
                                code = 受信メッセージのコード
                                id   = 受信メッセージの識別番号
                                seq  = 受信メッセージのシーケンス番号
                                len  = オプションデータ格納場所に得られた
                                       データの長さ(バイト)
                        srcで指定したIPアドレス構造体 = 
                                        メッセージ送信元IPアドレス
                        destで指定したIPアドレス構造体 = 
                                        メッセージ送信先IPアドレス
                        bufで指定したオプションデータ格納場所 =
                                        オプションデータ

                異常終了時
                        CF = 1
                        AL = 0以外(不定)

【解説】
                  最後に受信したICMPメッセージを取得する。このファンクション
                を実行すると、受信したメッセージはTEEN内部から消去される。最
                後にこのファンクションを実行してから受信したメッセージがない
                場合、エラーになる。
                  src, dest にはそれぞれメッセージの送信元と送信先のIPアドレ
                スを保存するIPアドレス構造体のアドレスを指定する。IPアドレス
                構造体は初期化されていなくてよい。IPアドレスを取得する必要の
                ない場合は0を指定する。
                  buf にはオプションデータの格納場所のアドレスを、len にはそ
                の格納場所のサイズ(バイト)を指定する。オプションデータを取得
                する必要のない場合、buf, len に0を指定する。ここでオプション
                データとは、ICMPメッセージの8バイト目以降(識別番号、シーケン
                ス番号の後)に格納されているデータである。
                  入力として与えるICMPパラメータテーブルのうち、
                ttl,dmy,type,code,id,seqには値を指定しなくてよい。
                  正常終了した場合、ttl,type,code,id,seq にそれぞれ対応する
                値が入る。オプションデータ格納場所に得られたデータ長がlenに
                入る。

                  このファンクションによって取得された受信メッセージはすぐに
                TEEN内部から消去されるため、複数のアプリケーションがこのファ
                ンクションを使用する場合、各受信メッセージはいずれか一つのア
                プリケーションでしか取得できない。

                  このファンクションはIPv6移行時の問題が考慮されていない。
                ping, traceroute等の特殊なアプリケーションをのぞき、一般アプ
                リケーションではなるべく使用しないで頂きたい。

【対応版番号】
                v0.37
                v0.38 より TTLが取得可能
